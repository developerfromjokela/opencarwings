from pprint import pprint

from django.test import TestCase

from tculink.gdc_proto.parser import parse_gdc_packet
from tculink.gdc_proto.responses import create_charge_status_response, create_charge_request_response, \
    create_ac_setting_response, create_ac_stop_response, create_config_read


class DataPacketParse(TestCase):

    def test_data_parse(self):
        """Animals that can speak are correctly identified"""
        packets = [
            "01 02 00 99 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 27 00 04 8C A0 FB 12 09 C0 3C 21 0D 9F 18 38 13 28 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 29 00 04 8C A1 31 24 09 C0 3C 21 0D 9F 18 38 13 28 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 2A 00 34 02 10 00 0B 0C 1A 45 A0 32 1F A3 4E E0 29 D2",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 28 00 04 8C F2 DB 97 09 C0 3C 21 0D 9A 18 38 13 34 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 2A 00 37 02 00 00 0B 0C 12 C6 90 32 1D 23 49 20 29 92",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 2C 00 04 8C F2 DB 97 09 C0 3C 21 0D 9A 18 38 13 34 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 2A 00 36 02 00 40 0B 0E 12 C6 90 32 1C E3 49 00 29 92",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 2C 00 04 8C F2 DB 97 09 C0 3C 21 0D 9A 18 38 13 34 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 2A 00 36 02 00 20 0B CC 12 C6 90 32 1C E3 47 C0 29 92",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 2A 00 04 8C A6 1D 0A 09 C0 3C 21 0D 9F 18 38 13 28 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 2C 00 37 02 04 00 0B CD 0F 02 D0 32 28 A3 64 00 2A D2",
            "05 02 02 55 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 2E 00 01 62 23 6B 12 60 20 2A 39 39 23 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60 30 69 6E 74 65 72 6E 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60 20 7A 65 72 6F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60 20 65 6D 69 73 73 69 6F 6E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60 20 61 75 74 6F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60 20 61 75 74 6F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 61 00 6E 69 73 73 61 6E 2D 65 75 2D 64 63 6D 2D 62 69 7A 2E 76 69 61 61 71 2E 65 75 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 61 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 45 00 00 00 00 00 43 49 50 00",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 28 00 04 8C F5 0D EB 09 C8 3C 21 0F 48 18 39 05 1A 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 31 00 3D 02 00 00 0B 28 12 C6 90 14 1D 23 48 60 29 92",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 28 00 04 8C F5 09 F1 09 C0 3C 21 0D 98 18 38 13 35 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 2E 00 3A 02 00 00 0B 2C 0F 05 28 30 21 63 52 60 29 D2",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 28 00 04 8C F5 09 F1 09 C0 3C 21 0D 98 18 38 13 35 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 2E 00 3A 02 00 00 0B 2C 0F 05 28 30 21 63 52 60 29 D2",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 28 00 04 8C F5 62 EF 09 C0 3C 21 0D 98 18 38 13 27 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 31 00 3D 02 00 00 0B 0C 0F 03 48 32 27 E3 61 A0 2A 52",
            "03 02 00 AD 20 5E B1 70 51 4A 4E 31 46 41 41 5A 45 30 55 30 30 30 39 33 36 36 4C 32 30 31 33 30 30 30 32 36 30 37 38 4F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4C 31 30 30 32 30 30 30 30 35 30 33 35 54 38 39 33 35 38 30 36 32 33 30 39 31 34 35 37 38 34 39 35 00 4A 30 36 2E 32 37 00 00 00 00 00 28 00 04 8C F7 14 A5 09 C0 3C 21 0D 98 18 38 13 27 20 22 50 64 65 76 66 72 6F 6D 6A 6F 6B 6C 61 00 00 00 00 50 35 34 41 37 34 44 44 43 00 00 00 00 00 00 00 00 04 00 31 00 3D 02 00 00 0B 2C 0F 03 48 32 27 E3 61 A0 2A 52"
        ]

        for idx, packet in enumerate(packets):
            hex_string = packet.replace(" ", "")
            print(f"> Packet {idx}: length {len(hex_string)} bytes")
            byte_data = bytes.fromhex(hex_string)
            parsed_data = parse_gdc_packet(byte_data)
            pprint(parsed_data)

    def test_get_responses(self):
        print("Charge status resp true", create_charge_status_response(True).hex(' ').upper())
        print("Charge status resp false", create_charge_status_response(False).hex(' ').upper())
        print("Charge resp true", create_charge_request_response(True).hex(' ').upper())
        print("Charge resp false", create_charge_request_response(False).hex(' ').upper())
        print("AC resp false", create_ac_setting_response(False).hex(' ').upper())
        print("AC resp true", create_ac_setting_response(True).hex(' ').upper())
        print("AC stop false", create_ac_stop_response(False).hex(' ').upper())
        print("AC stop true", create_ac_stop_response(True).hex(' ').upper())
        print("AC stop true", create_ac_stop_response(True).hex(' ').upper())
        print("Read config", create_config_read().hex(' ').upper())